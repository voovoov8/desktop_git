labs(title = "각 년도별 중위값 증가율", x = "년도", y = "중위값 증가율") +
theme_minimal()
# 그래프 생성
ggplot(yearly_growth_median2, aes(x = factor(year), y = growth)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.7) +
labs(title = "각 년도별 중위값 증가율", x = "년도", y = "중위값 증가율") +
theme_minimal()
# 그래프 생성
ggplot(yearly_growth_median, aes(x = factor(year), y = growth)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.7) +
labs(title = "각 년도별 중위값 증가율", x = "년도", y = "중위값 증가율") +
theme_minimal()
# 그래프 생성
ggplot(yearly_growth_median2, aes(x = factor(year), y = growth)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.7) +
labs(title = "각 년도별 중위값 증가율", x = "년도", y = "중위값 증가율") +
theme_minimal()
View(extracted_data5)
# 산점도 그리기
ggplot(extracted_data5, aes(x = year, y = ebit)) +
geom_point() +
geom_hline(yintercept = 2000000, color = "red", linetype = "dashed") +
labs(x = "Year", y = "EBIT", title = "Scatter Plot of EBIT by Year")
# 첫 번째 데이터 프레임에 대한 산점도 그리기
ggplot(extracted_data5, aes(x = year, y = ebit)) +
geom_point() +
geom_hline(yintercept = 2000000, color = "red", linetype = "dashed") +
labs(x = "Year", y = "EBIT", title = "Scatter Plot of EBIT by Year_uf") +
ylim(-2e07, 4e07)  # y 축 범위 조정
# 두 번째 데이터 프레임에 대한 산점도 그리기
ggplot(extracted_data4, aes(x = year, y = ebit)) +
geom_point() +
geom_hline(yintercept = 2000000, color = "red", linetype = "dashed") +
labs(x = "Year", y = "EBIT", title = "Scatter Plot of EBIT by Year_df") +
ylim(-2e07, 4e07)  # y 축 범위 조정
# 산점도 그리기
ggplot(extracted_data5, aes(x = year, y = ebit)) +
geom_point() +
geom_hline(yintercept = 2000000, color = "red", linetype = "dashed") +
labs(x = "Year", y = "EBIT", title = "Scatter Plot of EBIT by Year")
# 첫 번째 데이터 프레임에 대한 산점도 그리기
ggplot(extracted_data5, aes(x = year, y = ebit)) +
geom_point() +
geom_hline(yintercept = 2000000, color = "red", linetype = "dashed") +
labs(x = "Year", y = "EBIT", title = "Scatter Plot of EBIT by Year_uf") +
ylim(-2e07, 4e07)  # y 축 범위 조정
# 첫 번째 데이터 프레임에 대한 산점도 그리기
ggplot(extracted_data5, aes(x = year, y = ebit)) +
geom_point() +
geom_hline(yintercept = 2000000, color = "red", linetype = "dashed") +
labs(x = "Year", y = "EBIT", title = "Scatter Plot of EBIT by Year_uf") +
ylim(-2e07, 4e07)  # y 축 범위 조정
# 종목코드를 기준으로 회사명, 결산.연도, 매출액증가율 추출
extracted_data4 <- data[, c("종목코드", "회사명", "결산.연도", "법인세차감전계속사업이익")]
# 결과 확인
colnames(extracted_data4) <- c("code", "name", "year", "ebit")
str(extracted_data4)
# 첫 번째 데이터 프레임에 대한 산점도 그리기
ggplot(extracted_data5, aes(x = year, y = ebit)) +
geom_point() +
geom_hline(yintercept = 2000000, color = "red", linetype = "dashed") +
labs(x = "Year", y = "EBIT", title = "Scatter Plot of EBIT by Year_uf") +
ylim(-2e07, 4e07)  # y 축 범위 조정
str(extracted_data4)
# 두 번째 데이터 프레임에 대한 산점도 그리기
ggplot(extracted_data4, aes(x = year, y = ebit)) +
geom_point() +
geom_hline(yintercept = 2000000, color = "red", linetype = "dashed") +
labs(x = "Year", y = "EBIT", title = "Scatter Plot of EBIT by Year_df") +
ylim(-2e07, 4e07)  # y 축 범위 조정
# uf 의 경우
# 종목코드를 기준으로 회사명, 결산.연도, 매출액증가율 추출
extracted_data5 <- data2[, c("종목코드", "회사명.x", "결산.연도", "법인세차감전계속사업이익", "폐지년도.y")]
# 결과 확인
colnames(extracted_data5) <- c("code", "name", "year", "ebit","end")
str(extracted_data5)
# 첫 번째 데이터 프레임에 대한 산점도 그리기
ggplot(extracted_data5, aes(x = year, y = ebit)) +
geom_point() +
geom_hline(yintercept = 2000000, color = "red", linetype = "dashed") +
labs(x = "Year", y = "EBIT", title = "Scatter Plot of EBIT by Year_uf") +
ylim(-2e07, 4e07)  # y 축 범위 조정
# 각 년도별 EBIT의 평균 계산
mean_ebit_by_year <- aggregate(ebit ~ year, extracted_data4, mean)
# 산점도 그리기
ggplot(extracted_data4, aes(x = year, y = ebit)) +
geom_point() +  # 산점도 추가
geom_hline(yintercept = 2000000, color = "red", linetype = "dashed") +  # y축 빨간 점선 추가
geom_point(data = mean_ebit_by_year, aes(x = year, y = ebit), color = "red", size = 3) +  # 평균값을 빨간 점으로 표시
labs(x = "Year", y = "EBIT", title = "Scatter Plot of EBIT by Year_df") +
ylim(-2e07, 4e07) +  # y 축 범위 조정
theme_minimal()  # 테마 적용
# 두 번째 데이터 프레임에 대한 산점도 그리기
ggplot(extracted_data4, aes(x = year, y = ebit)) +
geom_point() +
geom_hline(yintercept = 2000000, color = "red", linetype = "dashed") +
labs(x = "Year", y = "EBIT", title = "Scatter Plot of EBIT by Year_df") +
ylim(-2e07, 4e07)  # y 축 범위 조정
# 산점도 그리기
ggplot(extracted_data4, aes(x = year, y = ebit)) +
geom_point() +  # 산점도 추가
geom_hline(yintercept = 2000000, color = "red", linetype = "dashed") +  # y축 빨간 점선 추가
geom_point(data = mean_ebit_by_year, aes(x = year, y = ebit), color = "red", size = 3) +  # 평균값을 빨간 점으로 표시
labs(x = "Year", y = "EBIT", title = "Scatter Plot of EBIT by Year_df") +
ylim(-2e07, 4e07) +  # y 축 범위 조정
theme_minimal()  # 테마 적용
# 각 년도별 EBIT의 평균 계산
mean_ebit_by_year_uf <- aggregate(ebit ~ year, extracted_data5, mean)
# 산점도 그리기
ggplot(extracted_data5, aes(x = year, y = ebit)) +
geom_point() +  # 산점도 추가
geom_hline(yintercept = 2000000, color = "red", linetype = "dashed") +  # y축 빨간 점선 추가
geom_point(data = mean_ebit_by_year_uf, aes(x = year, y = ebit), color = "red", size = 3) +  # 평균값을 빨간 점으로 표시
labs(x = "Year", y = "EBIT", title = "Scatter Plot of EBIT by Year_uf") +
ylim(-2e07, 4e07) +  # y 축 범위 조정
theme_minimal()  # 테마 적용
# 산점도 그리기
ggplot(extracted_data4, aes(x = year, y = ebit)) +
geom_point() +  # 산점도 추가
geom_hline(yintercept = 2000000, color = "red", linetype = "dashed") +  # y축 빨간 점선 추가
geom_point(data = mean_ebit_by_year, aes(x = year, y = ebit), color = "red", size = 3) +  # 평균값을 빨간 점으로 표시
labs(x = "Year", y = "EBIT", title = "Scatter Plot of EBIT by Year_df") +
ylim(-2e07, 4e07) +  # y 축 범위 조정
theme_minimal()  # 테마 적용
library(ggplot2)
library(dplyr)
file_path <- "C:/Users/윤채호/Downloads/df_new.csv"
data <- read.csv(file_path, header = TRUE, encoding = "UTF-8")
str(data)
View(data2)
file_path2 <- "C:/Users/윤채호/Downloads/result.csv"
data2 <- read.csv(file_path2, header = TRUE, encoding = "UTF-8")
str(data2)
str(df)
str(uf)
uf <- read.csv(file_path2, header = TRUE, encoding = "UTF-8")
df <- read.csv(file_path, header = TRUE, encoding = "UTF-8")
str(df)
uf <- read.csv(file_path2, header = TRUE, encoding = "UTF-8")
str(uf)
####### 자 두 집단의 매출액 증가율만 빼보자.
#df에서 뺴는 경우우
df_gro <- df[, c("종목코드", "회사명.x", "결산.연도", "매출액증가율")]
str(df)
####### 자 두 집단의 매출액 증가율만 빼보자.
#df에서 뺴는 경우우
df_gro <- df[, c("종목코드", "회사명", "결산.연도", "매출액증가율")]
colnames(df_gro) <- c("code", "name", "year", "growth")
str(df_gro)
#uf에서 뺴는 경우
uf_gro <- uf[, c("종목코드", "회사명.x", "결산.연도", "매출액증가율")]
colnames(uf_gro) <- c("code", "name", "year", "growth")
str(uf_gro)
str(df_gro)
str(uf_gro)
##  두 군집에서 평균과 중위값을 구하는 경우
# 첫 번째 데이터 프레임에서 년도별 growth의 평균과 중위값 계산
df_gro_mean <- aggregate(growth ~ year, df_gro, mean, na.rm = TRUE)
df_gro_median <- aggregate(growth ~ year, df_gro, median, na.rm = TRUE)
# 두 번째 데이터 프레임에서 년도별 growth의 평균과 중위값 계산
uf_gro_mean <- aggregate(growth ~ year, uf_gro, mean, na.rm = TRUE)
uf_gro_median <- aggregate(growth ~ year, uf_gro, median, na.rm = TRUE)
# 첫 번째 데이터 프레임에서 년도별 growth의 평균
print("첫 번째 데이터 프레임에서 년도별 growth의 평균:")
print(df_gro_mean)
print(df_gro_mean)
print(df_gro_median)
# The mean and median of df viz
# 평균 시각화
ggplot(df_gro_mean, aes(x = year, y = growth)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "평균 Growth by Year (df_gro)", x = "Year", y = "Average Growth")
# 중위값 시각화
ggplot(df_gro_median, aes(x = year, y = growth)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Median Growth by Year (df_gro)", x = "Year", y = "Median Growth")
# The mean and median of df viz
# 평균 시각화
ggplot(df_gro_mean, aes(x = year, y = growth)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "평균 Growth by Year (df_gro)", x = "Year", y = "Average Growth")
# 중위값 시각화
ggplot(df_gro_median, aes(x = year, y = growth)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Median Growth by Year (df_gro)", x = "Year", y = "Median Growth")
# The mean and median of uf viz
# 평균 시각화
ggplot(uf_gro_mean, aes(x = year, y = growth)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "평균 Growth by Year (uf_gro)", x = "Year", y = "Average Growth")
# 중위값 시각화
ggplot(uf_gro_median, aes(x = year, y = growth)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Median Growth by Year (uf_gro)", x = "Year", y = "Median Growth")
# The mean and median of df viz
# 평균 시각화
ggplot(df_gro_mean, aes(x = year, y = growth)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "평균 Growth by Year (df_gro)", x = "Year", y = "Average Growth")
# The mean and median of uf viz
# 평균 시각화
ggplot(uf_gro_mean, aes(x = year, y = growth)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "평균 Growth by Year (uf_gro)", x = "Year", y = "Average Growth")
# 중위값 시각화
ggplot(df_gro_median, aes(x = year, y = growth)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Median Growth by Year (df_gro)", x = "Year", y = "Median Growth")
# 중위값 시각화
ggplot(uf_gro_median, aes(x = year, y = growth)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Median Growth by Year (uf_gro)", x = "Year", y = "Median Growth")
# The mean and median of df viz
# 평균 시각화
ggplot(df_gro_mean, aes(x = year, y = growth)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "평균 Growth by Year (df_gro)", x = "Year", y = "Average Growth")
# The mean and median of uf viz
# 평균 시각화
ggplot(uf_gro_mean, aes(x = year, y = growth)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "평균 Growth by Year (uf_gro)", x = "Year", y = "Average Growth")
# 중위값 시각화
ggplot(df_gro_median, aes(x = year, y = growth)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Median Growth by Year (df_gro)", x = "Year", y = "Median Growth")
# 중위값 시각화
ggplot(uf_gro_median, aes(x = year, y = growth)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Median Growth by Year (uf_gro)", x = "Year", y = "Median Growth")
# 중위값 시각화
ggplot(df_gro_median, aes(x = year, y = growth)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Median Growth by Year (df_gro)", x = "Year", y = "Median Growth")
# 중위값 시각화
ggplot(df_gro_median, aes(x = year, y = growth)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Median Growth by Year (df_gro)", x = "Year", y = "Median Growth")
# 중위값 시각화
ggplot(uf_gro_median, aes(x = year, y = growth)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Median Growth by Year (uf_gro)", x = "Year", y = "Median Growth")
print(df_gro_mean)
print(df_gro_median)
print(df_gro_mean)
print(uf_gro_mean)
print(df_gro_median)
print(uf_gro_median)
# 중위값 시각화
ggplot(df_gro_median, aes(x = year, y = growth)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Median Growth by Year (df_gro)", x = "Year", y = "Median Growth")
# 중위값 시각화
ggplot(uf_gro_median, aes(x = year, y = growth)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Median Growth by Year (uf_gro)", x = "Year", y = "Median Growth")
# 파일 경로 지정
file_path_df_gro_mean <- "C:/Users/윤채호/Downloads/df_gro_mean.csv"
file_path_uf_gro_mean <- "C:/Users/윤채호/Downloads/uf_gro_mean.csv"
file_path_df_gro_median <- "C:/Users/윤채호/Downloads/df_gro_median.csv"
file_path_uf_gro_median <- "C:/Users/윤채호/Downloads/uf_gro_median.csv"
# CSV 파일로 저장
write.csv(df_gro_mean, file_path_df_gro_mean, row.names = FALSE)
write.csv(uf_gro_mean, file_path_uf_gro_mean, row.names = FALSE)
write.csv(df_gro_median, file_path_df_gro_median, row.names = FALSE)
write.csv(uf_gro_median, file_path_uf_gro_median, row.names = FALSE)
print(uf_gro_mean)
# 중위값 시각화
ggplot(df_gro_median, aes(x = year, y = growth)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Median Growth by Year (df_gro)", x = "Year", y = "Median Growth")
# 중위값 시각화
ggplot(uf_gro_median, aes(x = year, y = growth)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Median Growth by Year (uf_gro)", x = "Year", y = "Median Growth")
# 중위값 시각화
ggplot(uf_gro_median, aes(x = year, y = growth)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Median Growth by Year (uf_gro)", x = "Year", y = "Median Growth")
# 중위값 시각화
ggplot(df_gro_median, aes(x = year, y = growth)) +
geom_line(color = "red") +
geom_point(color = "red") +
labs(title = "Median Growth by Year (df_gro)", x = "Year", y = "Median Growth")
# 주어진 수들
numbers <- c(
139124, 452853, 140595, -669387, 560117, -1204136, 3426228, 763976, 1805807,
-766242, 563441, -3394197, 570586, 466149, 500338, -4211406, -671279, 462457,
338603, 510783, 2033732, 967580, 3990837, 208294, 116791, 717087, 2180421,
1271352, 628850, 1576506, -918344, 864729, -182639, -1903920, 961697, -5311999,
547254, -882606, -3461278, 436749, 91254, 619354, 1369858, 1107326, 553715,
120431, 600596, 267208, -1045592, -2400642, 6249, -784333, 89156, -167928, 969336
)
# 평균 계산
mean_value <- mean(numbers)
# 결과 출력
print(mean_value)
file_path <- "C:/Users/윤채호/Downloads/di.csv"
di <- read.csv(file_path, header = TRUE, encoding = "UTF-8")
str(di)
# di 데이터프레임에서 종목코드가 주어진 종목코드와 일치하는 행들을 선택합니다.
selected_rows <- di[di$종목코드 %in% c(204690, 144740, 138290, 181980, 251540, 241510, 220110, 246830, 281310, 205290, 252370, 309900, 311840), ]
# 선택된 행들을 출력합니다.
print(selected_rows)
# 선택된 행들에서 종목코드별로 그룹화하고 각 그룹에 대해 컬럼의 평균을 계산합니다.
mean_by_code <- selected_rows %>%
group_by(종목코드) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE))
# 결과 출력
print(mean_by_code)
# 결과 출력
View(mean_by_code)
# 선택된 행들을 출력합니다.
print(selected_rows)
# 선택된 행들을 출력합니다.
View(selected_rows)
file_path <- "C:/Users/윤채호/Downloads/di.csv"
write.csv(mean_by_code, file_path_uf_gro_median, row.names = FALSE)
file_path <- "C:/Users/윤채호/Downloads/di.csv"
write.csv(mean_by_code, file_path, row.names = FALSE)
file_path <- "C:/Users/윤채호/Downloads/di_12.csv"
write.csv(selected_rows, file_path, row.names = FALSE)
str(di)
library(dplyr)
# 종목코드별로 그룹화하고 volume이 0인 날과 0이 아닌 날의 개수를 계산합니다.
volume_summary <- di %>%
group_by(종목코드) %>%
summarise(
total_days = n(),  # 전체 거래일 수
zero_volume_days = sum(volume == 0),  # volume이 0인 날의 개수
non_zero_volume_days = sum(volume != 0)  # volume이 0이 아닌 날의 개수
) %>%
mutate(
zero_volume_ratio = zero_volume_days / total_days,  # volume이 0인 날의 비율
non_zero_volume_ratio = non_zero_volume_days / total_days  # volume이 0이 아닌 날의 비율
)
# 결과 출력
print(volume_summary)
str(di)
# 종목코드별로 그룹화하고 volume이 0인 날과 0이 아닌 날의 개수를 계산합니다.
volume_summary <- di %>%
group_by(종목코드) %>%
summarise(
total_days = n(),  # 전체 거래일 수
zero_volume_days = sum(Volume == 0),  # volume이 0인 날의 개수
non_zero_volume_days = sum(Volume != 0)  # volume이 0이 아닌 날의 개수
) %>%
mutate(
zero_volume_ratio = zero_volume_days / total_days,  # volume이 0인 날의 비율
non_zero_volume_ratio = non_zero_volume_days / total_days  # volume이 0이 아닌 날의 비율
)
# 결과 출력
print(volume_summary)
# 결과 출력
View(volume_summary)
file_path <- "C:/Users/윤채호/Downloads/ni.csv"
ni <- read.csv(file_path, header = TRUE, encoding = "UTF-8")
str(ni)
volume_summary <- ni %>%
group_by(종목코드) %>%
summarise(
total_days = n(),  # 전체 거래일 수
zero_volume_days = sum(Volume == 0),  # volume이 0인 날의 개수
non_zero_volume_days = sum(Volume != 0)  # volume이 0이 아닌 날의 개수
) %>%
mutate(
zero_volume_ratio = zero_volume_days / total_days,  # volume이 0인 날의 비율
non_zero_volume_ratio = non_zero_volume_days / total_days  # volume이 0이 아닌 날의 비율
)
##### 상폐기업
# 종목코드별로 그룹화하고 volume이 0인 날과 0이 아닌 날의 개수를 계산합니다.
volume_summary_df <- di %>%
group_by(종목코드) %>%
summarise(
total_days = n(),  # 전체 거래일 수
zero_volume_days = sum(Volume == 0),  # volume이 0인 날의 개수
non_zero_volume_days = sum(Volume != 0)  # volume이 0이 아닌 날의 개수
) %>%
mutate(
zero_volume_ratio = zero_volume_days / total_days,  # volume이 0인 날의 비율
non_zero_volume_ratio = non_zero_volume_days / total_days  # volume이 0이 아닌 날의 비율
)
volume_summary_ni <- ni %>%
group_by(종목코드) %>%
summarise(
total_days = n(),  # 전체 거래일 수
zero_volume_days = sum(Volume == 0),  # volume이 0인 날의 개수
non_zero_volume_days = sum(Volume != 0)  # volume이 0이 아닌 날의 개수
) %>%
mutate(
zero_volume_ratio = zero_volume_days / total_days,  # volume이 0인 날의 비율
non_zero_volume_ratio = non_zero_volume_days / total_days  # volume이 0이 아닌 날의 비율
)
View(volume_summary_ni)
###ui 의 거래량
file_path <- "C:/Users/윤채호/Downloads/ui.csv"
ui <- read.csv(file_path, header = TRUE, encoding = "UTF-8")
str(ui)
volume_summary_ui <- ui %>%
group_by(종목코드) %>%
summarise(
total_days = n(),  # 전체 거래일 수
zero_volume_days = sum(Volume == 0),  # volume이 0인 날의 개수
non_zero_volume_days = sum(Volume != 0)  # volume이 0이 아닌 날의 개수
) %>%
mutate(
zero_volume_ratio = zero_volume_days / total_days,  # volume이 0인 날의 비율
non_zero_volume_ratio = non_zero_volume_days / total_days  # volume이 0이 아닌 날의 비율
)
View(volume_summary_ui)
overall_mean_zero_volume_ratio <- mean(volume_summary$zero_volume_ratio_di)
overall_mean_zero_volume_ratio_di <- mean(volume_summary$zero_volume_ratio_di)
overall_mean_zero_volume_ratio_di <- mean(volume_summary_di$zero_volume_ratio)
##### 상폐기업
# 종목코드별로 그룹화하고 volume이 0인 날과 0이 아닌 날의 개수를 계산합니다.
volume_summary_di <- di %>%
group_by(종목코드) %>%
summarise(
total_days = n(),  # 전체 거래일 수
zero_volume_days = sum(Volume == 0),  # volume이 0인 날의 개수
non_zero_volume_days = sum(Volume != 0)  # volume이 0이 아닌 날의 개수
) %>%
mutate(
zero_volume_ratio = zero_volume_days / total_days,  # volume이 0인 날의 비율
non_zero_volume_ratio = non_zero_volume_days / total_days  # volume이 0이 아닌 날의 비율
)
overall_mean_zero_volume_ratio_di <- mean(volume_summary_di$zero_volume_ratio)
print(overall_mean_zero_volume_ratio_di)
overall_mean_zero_volume_ratio_ni <- mean(volume_summary_ni$zero_volume_ratio)
print(overall_mean_zero_volume_ratio_ni)
overall_mean_zero_volume_ratio_ui <- mean(volume_summary_ui$zero_volume_ratio)
print(overall_mean_zero_volume_ratio_ui)
getwd()
setwd("C:/Users/윤채호/Desktop/happiness_timeseries.csv")
getwd()
setwd("C:/Users/윤채호/Desktop/tool/FOR_R")
getwd()
install.packages("ggplopt2")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
.libPaths()
install.packages("ggplot2", lib = "C:/Users/yoonchaeho/Documents/R/win-library/4.1")
library(ggplot2)
install.packages("ggplot2", lib = "C:/Users/yoonchaeho/Documents/R/win-library/4.1")
remove.packages("ggplot2", lib = "C:/Users/yoonchaeho/Documents/R/win-library/4.1")
remove.packages("ggplot2")
install.packages("scales")
install.packages("ggplot2", lib = "C:/Users/yoonchaeho/Documents/R/win-library/4.1")
remove.packages("ggplot2")
install.packages("ggplot2", lib = "C:/Users/yoonchaeho/Documents/R/win-library/4.1")
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(scales)
install.packages(c("askpass", "backports", "bit", "bit64", "cachem", "cli", "colorspace", "curl", "data.table", "digest", "dplyr", "fansi", "farver", "fastmap", "fontawesome", "fs", "glue", "gtable", "haven", "htmltools", "jsonlite", "later", "lubridate", "openssl", "processx", "promises", "ps", "purrr", "ragg", "Rcpp", "readr", "readxl", "rlang", "rstudioapi", "sass", "scales", "stringi", "sys", "systemfonts", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "backports", "bit", "bit64", "cachem", "cli", "colorspace", "curl", "data.table", "digest", "dplyr", "fansi", "farver", "fastmap", "fontawesome", "fs", "glue", "gtable", "haven", "htmltools", "jsonlite", "later", "lubridate", "openssl", "processx", "promises", "ps", "purrr", "ragg", "Rcpp", "readr", "readxl", "rlang", "rstudioapi", "sass", "scales", "stringi", "sys", "systemfonts", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "backports", "bit", "bit64", "cachem", "cli", "colorspace", "curl", "data.table", "digest", "dplyr", "fansi", "farver", "fastmap", "fontawesome", "fs", "glue", "gtable", "haven", "htmltools", "jsonlite", "later", "lubridate", "openssl", "processx", "promises", "ps", "purrr", "ragg", "Rcpp", "readr", "readxl", "rlang", "rstudioapi", "sass", "scales", "stringi", "sys", "systemfonts", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "backports", "bit", "bit64", "cachem", "cli", "colorspace", "curl", "data.table", "digest", "dplyr", "fansi", "farver", "fastmap", "fontawesome", "fs", "glue", "gtable", "haven", "htmltools", "jsonlite", "later", "lubridate", "openssl", "processx", "promises", "ps", "purrr", "ragg", "Rcpp", "readr", "readxl", "rlang", "rstudioapi", "sass", "scales", "stringi", "sys", "systemfonts", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "backports", "bit", "bit64", "cachem", "cli", "colorspace", "curl", "data.table", "digest", "dplyr", "fansi", "farver", "fastmap", "fontawesome", "fs", "glue", "gtable", "haven", "htmltools", "jsonlite", "later", "lubridate", "openssl", "processx", "promises", "ps", "purrr", "ragg", "Rcpp", "readr", "readxl", "rlang", "rstudioapi", "sass", "scales", "stringi", "sys", "systemfonts", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "tzdb", "utf8", "uuid", "vctrs", "vroom", "withr", "xfun", "xml2", "yaml"))
version
install.packages("ggplot2")
library(ggplot2)
aa <- read.csv("C:/Users/yoonchaeho/Desktop/tool/FOR_R/unemployment.csv")
str(aa)
ggplot(aa, mapping = aes(x = id, y = unemp)) +
geom_point() +
labs(title = "Unemployment Rate by ID",
x = "ID",
y = "Unemployment Rate") +
theme_minimal()
ggplot(aa, mapping = aes(x = id, y = unemp)) +
geom_point() +
labs(title = "Unemployment Rate by ID",
x = "ID",
y = "Unemployment Rate") +
theme_minimal()
str(aa)
ggplot(aa, mapping = aes(x = id, y = unemp)) +
geom_point() +
labs(title = "Unemployment Rate by ID",
x = "ID",
y = "Unemployment Rate") +
theme_minimal()
library(jsonlite)
getwd
getwd()
setwd("C:\Users\yoonchaeho\Desktop\STATA_CLEAN\desktop_git")
setwd("C:/Users/yoonchaeho/Desktop/STATA_CLEAN/desktop_git")
